{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$defs": {
        "catalog": {
            "type": "string",
            "title": "Catalog",
            "description": "Name of the VCD catalog in which the VM template is stored.",
            "default": "giantswarm"
        },
        "cidrBlocks": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "IPv4 address range, in CIDR notation.",
                "examples": [
                    "10.244.0.0/16"
                ]
            },
            "maxItems": 1,
            "minItems": 1
        },
        "diskSizeGB": {
            "type": "integer",
            "title": "Disk size",
            "examples": [
                30
            ],
            "exclusiveMinimum": 0
        },
        "featureGate": {
            "type": "object",
            "title": "Feature gate",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "title": "Enabled"
                },
                "name": {
                    "type": "string",
                    "title": "Name",
                    "examples": [
                        "UserNamespacesStatelessPodsSupport"
                    ],
                    "pattern": "^[A-Za-z0-9]+$"
                }
            }
        },
        "nodeLabels": {
            "type": "array",
            "title": "Node labels",
            "items": {
                "type": "string",
                "title": "Custom node label",
                "examples": [
                    "key=value"
                ],
                "pattern": "^[A-Za-z0-9-_\\./]{1,63}=[A-Za-z0-9-_\\.]{0,63}$"
            }
        },
        "nodeTaints": {
            "type": "array",
            "title": "Node taints",
            "items": {
                "type": "object",
                "title": "Custom node taint",
                "required": [
                    "key",
                    "effect"
                ],
                "additionalProperties": false,
                "properties": {
                    "effect": {
                        "type": "string",
                        "title": "Node taint effect",
                        "description": "One of NoSchedule, PreferNoSchedule or NoExecute.",
                        "enum": [
                            "NoSchedule",
                            "PreferNoSchedule",
                            "NoExecute"
                        ]
                    },
                    "key": {
                        "type": "string",
                        "title": "Node taint key",
                        "description": "Name of the label on a node.",
                        "minLength": 1
                    },
                    "value": {
                        "type": "string",
                        "title": "Node taint value",
                        "description": "Value of the label identified by the key."
                    }
                }
            }
        },
        "placementPolicy": {
            "type": "string",
            "title": "VM placement policy",
            "description": "Name of the VCD VM placement policy to use."
        },
        "replicas": {
            "type": "integer",
            "title": "Number of nodes",
            "examples": [
                3
            ],
            "exclusiveMinimum": 1
        },
        "sizingPolicy": {
            "type": "string",
            "title": "Sizing policy",
            "description": "Name of the VCD sizing policy to use.",
            "examples": [
                "m1.medium"
            ]
        },
        "storageProfile": {
            "type": "string",
            "title": "Storage profile",
            "description": "Name of the VCD storage profile to use."
        },
        "template": {
            "type": "string",
            "title": "Template",
            "description": "Name of the template used to create the node VMs.",
            "default": "flatcar-stable-3815.2.2-kube-v1.27.14-gs"
        }
    },
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "baseDomain": {
            "type": "string",
            "title": "Base DNS domain"
        },
        "cluster": {
            "type": "object",
            "title": "Cluster",
            "description": "Helm values for the provider-independent cluster chart.",
            "default": {
                "providerIntegration": {
                    "controlPlane": {
                        "resources": {
                            "infrastructureMachineTemplate": {
                                "group": "infrastructure.cluster.x-k8s.io",
                                "kind": "VCDMachineTemplate",
                                "version": "v1beta2"
                            },
                            "infrastructureMachineTemplateSpecTemplateName": "controlplane-vcdmachinetemplate-spec"
                        }
                    },
                    "environmentVariables": {
                        "hostName": "COREOS_CUSTOM_HOSTNAME",
                        "ipv4": "COREOS_CUSTOM_IPV4"
                    },
                    "kubeadmConfig": {
                        "enableGiantswarmUser": true,
                        "files": [
                            {
                                "contentFrom": {
                                    "secret": {
                                        "key": "set-hostname.sh",
                                        "name": "provider-specific-files-1",
                                        "prependClusterNameAsPrefix": true
                                    }
                                },
                                "path": "/opt/bin/set-hostname.sh",
                                "permissions": "0755"
                            }
                        ],
                        "ignition": {
                            "containerLinuxConfig": {
                                "additionalConfig": {
                                    "systemd": {
                                        "units": [
                                            {
                                                "contents": {
                                                    "after": [
                                                        "network-online.target"
                                                    ],
                                                    "install": {
                                                        "wantedBy": [
                                                            "multi-user.target"
                                                        ]
                                                    },
                                                    "requires": [
                                                        "network-online.target"
                                                    ],
                                                    "service": {
                                                        "type": "oneshot",
                                                        "execStart": [
                                                            "/usr/bin/bash -cv 'echo \"$(\"$(find /usr/bin /usr/share/oem -name vmtoolsd -type f -executable 2>/dev/null | head -n 1)\" --cmd \"info-get guestinfo.ignition.network\")\" > /opt/bin/set-networkd-units.sh'",
                                                            "/usr/bin/bash -cv 'chmod u+x /opt/bin/set-networkd-units.sh'",
                                                            "/opt/bin/set-networkd-units.sh"
                                                        ],
                                                        "remainAfterExit": "yes"
                                                    },
                                                    "unit": {
                                                        "description": "Install the systemd-networkd interface configuration."
                                                    }
                                                },
                                                "enabled": true,
                                                "name": "set-networkd-units.service"
                                            },
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "multi-user.target"
                                                        ]
                                                    },
                                                    "service": {
                                                        "type": "oneshot",
                                                        "additionalFields": "{{- if $.global.connectivity.network.staticRoutes }}\nExecStart=/usr/bin/bash -cv 'sleep 3'\n{{- range $.global.connectivity.network.staticRoutes }}\nExecStart=/usr/bin/bash -cv 'ip route add {{ .destination }} via {{ .via }}'\n{{- end }}\n{{- else }}\necho \"No static routes provided, exiting.\"\nexit 0\n{{- end }}",
                                                        "remainAfterExit": "yes"
                                                    },
                                                    "unit": {
                                                        "description": "Add static network routes.",
                                                        "after": [
                                                            "set-networkd-units.service",
                                                            "systemd-networkd.service"
                                                        ],
                                                        "bindsTo": "systemd-networkd.service"
                                                    }
                                                },
                                                "enabled": true,
                                                "name": "static-routes.service"
                                            },
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "multi-user.target"
                                                        ]
                                                    },
                                                    "service": {
                                                        "type": "oneshot",
                                                        "environment": [
                                                            "OUTPUT=/run/metadata/coreos"
                                                        ],
                                                        "execStart": [
                                                            "/usr/bin/mkdir --parent /run/metadata",
                                                            "/usr/bin/bash -cv 'echo \"COREOS_CUSTOM_HOSTNAME=$(\"$(find /usr/bin /usr/share/oem -name vmtoolsd -type f -executable 2>/dev/null | head -n 1)\" --cmd \"info-get guestinfo.ignition.vmname\")\" > ${OUTPUT}'",
                                                            "/usr/bin/bash -cv 'echo \"COREOS_CUSTOM_IPV4=$(ip -4 addr show ens192 | awk \\'/inet / {print $2}\\' | cut -d \\'/\\' -f1)\" >> ${OUTPUT}'"
                                                        ],
                                                        "remainAfterExit": "yes",
                                                        "restart": "on-failure"
                                                    },
                                                    "unit": {
                                                        "description": "Provides CoreOS metadata for dependent services.",
                                                        "after": [
                                                            "set-networkd-units.service"
                                                        ]
                                                    }
                                                },
                                                "enabled": true,
                                                "name": "coreos-metadata.service"
                                            },
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "multi-user.target"
                                                        ]
                                                    },
                                                    "service": {
                                                        "type": "oneshot",
                                                        "environmentFile": [
                                                            "/run/metadata/coreos"
                                                        ],
                                                        "execStart": [
                                                            "/opt/bin/set-hostname.sh"
                                                        ],
                                                        "remainAfterExit": "yes"
                                                    },
                                                    "unit": {
                                                        "description": "Set machine hostname",
                                                        "after": [
                                                            "coreos-metadata.service"
                                                        ],
                                                        "before": [
                                                            "teleport.service"
                                                        ],
                                                        "requires": [
                                                            "coreos-metadata.service"
                                                        ]
                                                    }
                                                },
                                                "enabled": true,
                                                "name": "set-hostname.service"
                                            },
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "default.target"
                                                        ]
                                                    },
                                                    "service": {
                                                        "type": "oneshot",
                                                        "execStart": [
                                                            "/usr/sbin/ethtool -K ens192 tx-udp_tnl-csum-segmentation off",
                                                            "/usr/sbin/ethtool -K ens192 tx-udp_tnl-segmentation off"
                                                        ],
                                                        "remainAfterExit": "yes"
                                                    },
                                                    "unit": {
                                                        "description": "Disable TCP segmentation offloading",
                                                        "after": [
                                                            "network.target"
                                                        ]
                                                    }
                                                },
                                                "enabled": true,
                                                "name": "ethtool-segmentation.service"
                                            },
                                            {
                                                "dropins": [
                                                    {
                                                        "contents": "[Unit]\nUpholds=static-routes.service",
                                                        "name": "10-static-routes-dependency.conf"
                                                    }
                                                ],
                                                "enabled": true,
                                                "name": "systemd-networkd.service"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "postKubeadmCommands": [
                            "usermod -aG root nobody"
                        ]
                    },
                    "kubernetesVersion": "1.27.14",
                    "provider": "cloud-director",
                    "resourcesApi": {
                        "bastionResourceEnabled": false,
                        "ciliumHelmReleaseResourceEnabled": false,
                        "cleanupHelmReleaseResourcesEnabled": false,
                        "clusterResourceEnabled": true,
                        "controlPlaneResourceEnabled": true,
                        "coreDnsHelmReleaseResourceEnabled": false,
                        "helmRepositoryResourcesEnabled": false,
                        "infrastructureCluster": {
                            "group": "infrastructure.cluster.x-k8s.io",
                            "kind": "VCDCluster",
                            "version": "v1beta2"
                        },
                        "infrastructureMachinePool": {
                            "group": "infrastructure.cluster.x-k8s.io",
                            "kind": "VCDMachineTemplate",
                            "version": "v1beta2"
                        },
                        "machineHealthCheckResourceEnabled": false,
                        "machinePoolResourcesEnabled": true,
                        "networkPoliciesHelmReleaseResourceEnabled": false,
                        "nodePoolKind": "MachineDeployment",
                        "verticalPodAutoscalerCrdHelmReleaseResourceEnabled": false
                    },
                    "workers": {
                        "defaultNodePools": {
                            "def00": {
                                "catalog": "giantswarm",
                                "diskSize": "32212254720",
                                "replicas": 2,
                                "sizingPolicy": "m1.large",
                                "template": "flatcar-stable-3815.2.2-kube-v1.27.14-gs"
                            }
                        },
                        "resources": {
                            "infrastructureMachineTemplateSpecTemplateName": "worker-vcdmachinetemplate-spec"
                        }
                    }
                }
            }
        },
        "cluster-shared": {
            "type": "object",
            "title": "Library chart"
        },
        "connectivity": {
            "type": "object",
            "title": "Connectivity",
            "description": "Configurations related to cluster connectivity such as container registries.",
            "additionalProperties": false,
            "properties": {
                "containerRegistries": {
                    "type": "object",
                    "title": "Container registries",
                    "description": "Endpoints and credentials configuration for container registries.",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "endpoint"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "credentials": {
                                    "type": "object",
                                    "title": "Credentials",
                                    "description": "Credentials for the endpoint.",
                                    "additionalProperties": false,
                                    "properties": {
                                        "auth": {
                                            "type": "string",
                                            "title": "Auth",
                                            "description": "Base64-encoded string from the concatenation of the username, a colon, and the password."
                                        },
                                        "identitytoken": {
                                            "type": "string",
                                            "title": "Identity token",
                                            "description": "Used to authenticate the user and obtain an access token for the registry."
                                        },
                                        "password": {
                                            "type": "string",
                                            "title": "Password",
                                            "description": "Used to authenticate for the registry with username/password."
                                        },
                                        "username": {
                                            "type": "string",
                                            "title": "Username",
                                            "description": "Used to authenticate for the registry with username/password."
                                        }
                                    }
                                },
                                "endpoint": {
                                    "type": "string",
                                    "title": "Endpoint",
                                    "description": "Endpoint for the container registry."
                                }
                            }
                        }
                    },
                    "default": {}
                }
            }
        },
        "global": {
            "type": "object",
            "title": "Global parameters",
            "required": [
                "connectivity",
                "controlPlane",
                "nodePools"
            ],
            "properties": {
                "connectivity": {
                    "type": "object",
                    "title": "Connectivity",
                    "description": "Configurations related to cluster connectivity such as container registries.",
                    "required": [
                        "baseDomain",
                        "network"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "baseDomain": {
                            "type": "string",
                            "title": "Base DNS domain"
                        },
                        "containerRegistries": {
                            "type": "object",
                            "title": "Container registries",
                            "description": "Endpoints and credentials configuration for container registries.",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "endpoint"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "credentials": {
                                            "type": "object",
                                            "title": "Credentials",
                                            "description": "Credentials for the endpoint.",
                                            "additionalProperties": false,
                                            "properties": {
                                                "auth": {
                                                    "type": "string",
                                                    "title": "Auth",
                                                    "description": "Base64-encoded string from the concatenation of the username, a colon, and the password."
                                                },
                                                "identitytoken": {
                                                    "type": "string",
                                                    "title": "Identity token",
                                                    "description": "Used to authenticate the user and obtain an access token for the registry."
                                                },
                                                "password": {
                                                    "type": "string",
                                                    "title": "Password",
                                                    "description": "Used to authenticate for the registry with username/password."
                                                },
                                                "username": {
                                                    "type": "string",
                                                    "title": "Username",
                                                    "description": "Used to authenticate for the registry with username/password."
                                                }
                                            }
                                        },
                                        "endpoint": {
                                            "type": "string",
                                            "title": "Endpoint",
                                            "description": "Endpoint for the container registry."
                                        }
                                    }
                                }
                            },
                            "default": {}
                        },
                        "localRegistryCache": {
                            "type": "object",
                            "title": "Local registry cache",
                            "description": "Caching container registry within the cluster.",
                            "required": [
                                "enabled",
                                "port"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "title": "Enable",
                                    "description": "Enabling this will deploy the Zot registry service in the cluster. To make use of it as a pull-through cache, you also have to specify registries to cache images for.",
                                    "default": false
                                },
                                "mirroredRegistries": {
                                    "type": "array",
                                    "title": "Registries to cache",
                                    "description": "Here you must specify each registry to cache container images for. Please also make sure to have an entry for each registry in Global > Components > Containerd > Container registries.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": []
                                },
                                "port": {
                                    "type": "integer",
                                    "title": "Service port",
                                    "description": "NodePort used by the local registry service.",
                                    "default": 32767
                                }
                            }
                        },
                        "network": {
                            "type": "object",
                            "title": "Network",
                            "required": [
                                "loadBalancers",
                                "pods",
                                "services"
                            ],
                            "additionalProperties": true,
                            "properties": {
                                "controlPlaneEndpoint": {
                                    "type": "object",
                                    "title": "Control plane endpoint",
                                    "description": "Kubernetes API endpoint.",
                                    "additionalProperties": false,
                                    "properties": {
                                        "host": {
                                            "type": "string",
                                            "title": "Host"
                                        },
                                        "port": {
                                            "type": "integer",
                                            "title": "Port number",
                                            "default": 6443
                                        }
                                    }
                                },
                                "extraOvdcNetworks": {
                                    "type": "array",
                                    "title": "Extra OVDC networks",
                                    "description": "OVDC networks to attach VMs to, additionally.",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "hostEntries": {
                                    "type": "array",
                                    "title": "Host entries",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "ip",
                                            "fqdn"
                                        ],
                                        "additionalProperties": false,
                                        "properties": {
                                            "fqdn": {
                                                "type": "string",
                                                "title": "FQDN"
                                            },
                                            "ip": {
                                                "type": "string",
                                                "title": "IP address",
                                                "format": "ipv4"
                                            }
                                        }
                                    }
                                },
                                "loadBalancers": {
                                    "type": "object",
                                    "title": "Load Balancers",
                                    "required": [
                                        "vipSubnet"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "vipSubnet": {
                                            "type": "string",
                                            "title": "Virtual IP subnet",
                                            "description": "Virtual IP CIDR for the external network."
                                        }
                                    }
                                },
                                "pods": {
                                    "type": "object",
                                    "title": "Pods",
                                    "required": [
                                        "cidrBlocks"
                                    ],
                                    "additionalProperties": true,
                                    "properties": {
                                        "cidrBlocks": {
                                            "$ref": "#/$defs/cidrBlocks",
                                            "title": "Pod subnets",
                                            "default": [
                                                "10.244.0.0/16"
                                            ]
                                        }
                                    }
                                },
                                "services": {
                                    "type": "object",
                                    "title": "Services",
                                    "required": [
                                        "cidrBlocks"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "cidrBlocks": {
                                            "$ref": "#/$defs/cidrBlocks",
                                            "title": "Service subnets",
                                            "default": [
                                                "172.31.0.0/16"
                                            ]
                                        }
                                    }
                                },
                                "staticRoutes": {
                                    "type": "array",
                                    "title": "Static routes",
                                    "items": {
                                        "type": "object",
                                        "required": [
                                            "destination",
                                            "via"
                                        ],
                                        "additionalProperties": false,
                                        "properties": {
                                            "destination": {
                                                "type": "string",
                                                "title": "Destination",
                                                "description": "IPv4 address range in CIDR notation.",
                                                "examples": [
                                                    "10.128.0.0/16"
                                                ]
                                            },
                                            "via": {
                                                "type": "string",
                                                "title": "Via",
                                                "format": "ipv4"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "proxy": {
                            "type": "object",
                            "title": "Proxy",
                            "description": "Whether/how outgoing traffic is routed through proxy servers.",
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "title": "Enable"
                                },
                                "httpProxy": {
                                    "type": "string",
                                    "title": "HTTP proxy",
                                    "description": "HTTP proxy - To be passed to the HTTP_PROXY environment variable in all hosts."
                                },
                                "httpsProxy": {
                                    "type": "string",
                                    "title": "HTTPS proxy",
                                    "description": "HTTPS proxy - To be passed to the HTTPS_PROXY environment variable in all hosts."
                                },
                                "noProxy": {
                                    "type": "string",
                                    "title": "No proxy",
                                    "description": "No proxy - Comma-separated addresses to be passed to the NO_PROXY environment variable in all hosts."
                                }
                            }
                        }
                    }
                },
                "controlPlane": {
                    "type": "object",
                    "title": "Control plane",
                    "required": [
                        "replicas"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "customNodeLabels": {
                            "$ref": "#/$defs/nodeLabels",
                            "title": "Custom node labels"
                        },
                        "machineTemplate": {
                            "type": "object",
                            "title": "Template to define control plane nodes",
                            "required": [
                                "catalog",
                                "template"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "catalog": {
                                    "$ref": "#/$defs/catalog",
                                    "title": "Catalog",
                                    "description": "VCD catalog where the VM template is stored."
                                },
                                "diskSizeGB": {
                                    "$ref": "#/$defs/diskSizeGB",
                                    "title": "Disk size",
                                    "description": "Control plane node root volume size, in gigabytes."
                                },
                                "placementPolicy": {
                                    "$ref": "#/$defs/placementPolicy"
                                },
                                "sizingPolicy": {
                                    "$ref": "#/$defs/sizingPolicy"
                                },
                                "storageProfile": {
                                    "$ref": "#/$defs/storageProfile"
                                },
                                "template": {
                                    "$ref": "#/$defs/template",
                                    "title": "VM template"
                                }
                            }
                        },
                        "oidc": {
                            "type": "object",
                            "title": "OIDC authentication",
                            "required": [
                                "clientId",
                                "groupsClaim",
                                "issuerUrl",
                                "usernameClaim"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "caPem": {
                                    "type": "string",
                                    "title": "Certificate authority file",
                                    "description": "Path to identity provider's CA certificate in PEM format."
                                },
                                "clientId": {
                                    "type": "string",
                                    "title": "Client ID",
                                    "description": "OIDC client identifier to identify with."
                                },
                                "groupsClaim": {
                                    "type": "string",
                                    "title": "Groups claim",
                                    "description": "Name of the identity token claim bearing the user's group memberships."
                                },
                                "issuerUrl": {
                                    "type": "string",
                                    "title": "Issuer URL",
                                    "description": "URL of the provider which allows the API server to discover public signing keys, not including any path. Discovery URL without the '/.well-known/openid-configuration' part."
                                },
                                "usernameClaim": {
                                    "type": "string",
                                    "title": "Username claim",
                                    "description": "Name of the identity token claim bearing the unique user identifier."
                                }
                            }
                        },
                        "replicas": {
                            "type": "integer",
                            "title": "Number of nodes",
                            "description": "Number of control plane instances to create. Must be an odd number.",
                            "default": 1
                        }
                    }
                },
                "managementCluster": {
                    "type": "string",
                    "title": "Management cluster",
                    "description": "Name of the Cluster API cluster managing this workload cluster."
                },
                "metadata": {
                    "type": "object",
                    "title": "Metadata",
                    "additionalProperties": false,
                    "properties": {
                        "description": {
                            "type": "string",
                            "title": "Cluster description",
                            "description": "User-friendly description of the cluster's purpose."
                        },
                        "labels": {
                            "type": "object",
                            "title": "Labels",
                            "description": "These labels are added to the Kubernetes resources defining this cluster.",
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[a-zA-Z0-9/\\._-]+$": {
                                    "type": "string",
                                    "title": "Label",
                                    "maxLength": 63,
                                    "minLength": 0,
                                    "pattern": "^[a-zA-Z0-9\\._-]+$"
                                }
                            }
                        },
                        "name": {
                            "type": "string",
                            "title": "Cluster name"
                        },
                        "organization": {
                            "type": "string",
                            "title": "Organization"
                        },
                        "preventDeletion": {
                            "type": "boolean",
                            "title": "Prevent cluster deletion",
                            "default": false
                        },
                        "servicePriority": {
                            "type": "string",
                            "title": "Service priority",
                            "description": "The relative importance of this cluster.",
                            "$comment": "Defined in https://github.com/giantswarm/rfc/tree/main/classify-cluster-priority",
                            "enum": [
                                "highest",
                                "medium",
                                "lowest"
                            ],
                            "default": "highest"
                        }
                    }
                },
                "nodePools": {
                    "type": "object",
                    "title": "Node pools",
                    "description": "Groups of worker nodes with identical configuration.",
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[a-z0-9-]{3,10}$": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "catalog": {
                                    "$ref": "#/$defs/catalog"
                                },
                                "customNodeLabels": {
                                    "$ref": "#/$defs/nodeLabels"
                                },
                                "customNodeTaints": {
                                    "$ref": "#/$defs/nodeTaints"
                                },
                                "diskSizeGB": {
                                    "$ref": "#/$defs/diskSizeGB",
                                    "description": "Node root volume size, in GB."
                                },
                                "placementPolicy": {
                                    "$ref": "#/$defs/placementPolicy"
                                },
                                "replicas": {
                                    "$ref": "#/$defs/replicas",
                                    "default": 2
                                },
                                "sizingPolicy": {
                                    "$ref": "#/$defs/sizingPolicy"
                                },
                                "storageProfile": {
                                    "$ref": "#/$defs/storageProfile"
                                },
                                "template": {
                                    "$ref": "#/$defs/template"
                                }
                            }
                        }
                    },
                    "properties": {
                        "worker": {
                            "type": "object",
                            "title": "Default nodePool",
                            "additionalProperties": false,
                            "properties": {
                                "catalog": {
                                    "$ref": "#/$defs/catalog"
                                },
                                "customNodeLabels": {
                                    "$ref": "#/$defs/nodeLabels"
                                },
                                "customNodeTaints": {
                                    "$ref": "#/$defs/nodeTaints"
                                },
                                "diskSizeGB": {
                                    "$ref": "#/$defs/diskSizeGB",
                                    "description": "Node root volume size, in GB."
                                },
                                "placementPolicy": {
                                    "$ref": "#/$defs/placementPolicy"
                                },
                                "replicas": {
                                    "$ref": "#/$defs/replicas",
                                    "default": 2
                                },
                                "sizingPolicy": {
                                    "$ref": "#/$defs/sizingPolicy"
                                },
                                "storageProfile": {
                                    "$ref": "#/$defs/storageProfile"
                                },
                                "template": {
                                    "$ref": "#/$defs/template"
                                }
                            }
                        }
                    }
                },
                "podSecurityStandards": {
                    "type": "object",
                    "title": "Pod Security Standards",
                    "properties": {
                        "enforced": {
                            "type": "boolean",
                            "title": "Enforced Pod Security Standards",
                            "description": "Use PSSs instead of PSPs.",
                            "default": true
                        }
                    }
                },
                "providerSpecific": {
                    "type": "object",
                    "title": "VMware Cloud Director (VCD) settings",
                    "required": [
                        "org",
                        "ovdc",
                        "ovdcNetwork",
                        "site"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "cloudProviderInterface": {
                            "type": "object",
                            "title": "Cloud provider interface (CPI)",
                            "required": [
                                "enableVirtualServiceSharedIP",
                                "oneArm"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "enableVirtualServiceSharedIP": {
                                    "type": "boolean",
                                    "title": "Share IPs in virtual services",
                                    "description": "If enabled, multiple virtual services can share the same virtual IP address.",
                                    "default": true
                                },
                                "oneArm": {
                                    "type": "object",
                                    "title": "One-arm",
                                    "description": "If enabled, use an internal IP for the virtual service with a NAT rule to expose the external IP. Otherwise the virtual service will be exposed directly with the external IP.",
                                    "additionalProperties": false,
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "title": "Enable",
                                            "default": false
                                        }
                                    }
                                }
                            }
                        },
                        "containerStorageInterface": {
                            "type": "object",
                            "title": "Container storage interface (CSI)",
                            "required": [
                                "storageClass"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "storageClass": {
                                    "type": "object",
                                    "title": "Pre-create storage class",
                                    "description": "Pre-create storage class for the VCD CSI.",
                                    "additionalProperties": false,
                                    "properties": {
                                        "delete": {
                                            "type": "object",
                                            "title": "Pre-create delete storage class",
                                            "properties": {
                                                "isDefault": {
                                                    "type": "boolean",
                                                    "title": "Default storage class",
                                                    "default": true
                                                },
                                                "vcdStorageProfileName": {
                                                    "type": "string",
                                                    "title": "Name of storage profile in VCD",
                                                    "default": ""
                                                }
                                            }
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "title": "Enable",
                                            "default": true
                                        },
                                        "retain": {
                                            "type": "object",
                                            "title": "Pre-create retain storage class",
                                            "properties": {
                                                "isDefault": {
                                                    "type": "boolean",
                                                    "title": "Default storage class",
                                                    "default": false
                                                },
                                                "vcdStorageProfileName": {
                                                    "type": "string",
                                                    "title": "Name of storage profile in VCD",
                                                    "default": ""
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "org": {
                            "type": "string",
                            "title": "Organization",
                            "description": "VCD organization name."
                        },
                        "ovdc": {
                            "type": "string",
                            "title": "OvDC name",
                            "description": "Name of the organization virtual datacenter (OvDC) to create this cluster in."
                        },
                        "ovdcNetwork": {
                            "type": "string",
                            "title": "OvDC network",
                            "description": "VCD network to connect VMs."
                        },
                        "site": {
                            "type": "string",
                            "title": "Endpoint",
                            "description": "VCD endpoint URL in the format https://VCD_HOST, without trailing slash."
                        },
                        "userContext": {
                            "type": "object",
                            "title": "VCD API access token",
                            "additionalProperties": false,
                            "properties": {
                                "secretRef": {
                                    "type": "object",
                                    "title": "Secret reference",
                                    "additionalProperties": false,
                                    "properties": {
                                        "secretName": {
                                            "type": "string",
                                            "title": "Name",
                                            "description": "Name of the secret containing the VCD API token."
                                        }
                                    }
                                }
                            }
                        },
                        "vmBootstrapFormat": {
                            "type": "string",
                            "title": "Ignition or cloud-init for OS initialization",
                            "description": "Select either 'ignition' for Flatcar or 'cloud-config' for other OSes (e.g. Ubuntu).",
                            "enum": [
                                "cloud-config",
                                "ignition"
                            ],
                            "default": "ignition"
                        },
                        "vmNamingTemplate": {
                            "type": "string",
                            "title": "VM naming template",
                            "description": "Go template to specify the VM naming convention.",
                            "examples": [
                                "mytenant-{{ .machine.Name | sha256sum | trunc 7 }}"
                            ]
                        }
                    }
                }
            }
        },
        "internal": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ciliumNetworkPolicy": {
                    "type": "object",
                    "title": "CiliumNetworkPolicies",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "title": "Enable CiliumNetworkPolicies",
                            "description": "Installs the network-policies-app (deny all by default) if set to true",
                            "default": true
                        }
                    }
                },
                "kubectlImage": {
                    "type": "object",
                    "title": "Kubectl image",
                    "description": "Used by cluster-shared library chart to configure coredns in-cluster.",
                    "additionalProperties": false,
                    "properties": {
                        "name": {
                            "type": "string",
                            "title": "Repository",
                            "default": "giantswarm/kubectl"
                        },
                        "registry": {
                            "type": "string",
                            "title": "Registry",
                            "default": "gsoci.azurecr.io"
                        },
                        "tag": {
                            "type": "string",
                            "title": "Tag",
                            "default": "1.27.14"
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "title": "Kubernetes version",
                    "description": "For cloud-init (Ubuntu), append the version with '+vmware.1'.",
                    "default": "v1.27.14"
                },
                "parentUid": {
                    "type": "string",
                    "title": "Management cluster UID",
                    "description": "If set, create the cluster from a specific management cluster associated with this UID."
                },
                "rdeId": {
                    "type": "string",
                    "title": "Runtime defined entity (RDE) identifier",
                    "description": "This cluster's RDE ID in the VCD API."
                },
                "skipRde": {
                    "type": "boolean",
                    "title": "Skip RDE",
                    "description": "Set to true if the API schema extension is installed in the correct version in VCD to create CAPVCD entities in the API. Set to false otherwise."
                },
                "teleport": {
                    "type": "object",
                    "title": "Teleport",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "title": "Enable teleport",
                            "default": true
                        },
                        "proxyAddr": {
                            "type": "string",
                            "title": "Teleport proxy address",
                            "default": "teleport.giantswarm.io:443"
                        }
                    }
                },
                "useAsManagementCluster": {
                    "type": "boolean",
                    "title": "Display as management cluster",
                    "default": false
                }
            }
        },
        "managementCluster": {
            "type": "string",
            "title": "Management cluster name",
            "description": "The Cluster API management cluster that manages this cluster."
        },
        "provider": {
            "type": "string",
            "title": "Cluster API provider name"
        }
    }
}
