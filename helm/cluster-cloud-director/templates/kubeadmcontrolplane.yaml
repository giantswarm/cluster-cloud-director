apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{ include "resource.default.name" $ }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        certSANs:
        - localhost
        - 127.0.0.1
        - "api.{{ include "resource.default.name" $ }}.{{ .Values.baseDomain }}"
        extraArgs:
          cloud-provider: external
          enable-admission-plugins: {{ .Values.apiServer.enableAdmissionPlugins }}
          encryption-provider-config: /etc/kubernetes/encryption/config.yaml
          feature-gates: {{ .Values.apiServer.featureGates }}
          kubelet-preferred-address-types: "InternalIP"
          logtostderr: "true"
          {{- if .Values.oidc.issuerUrl }}
          {{- with .Values.oidc }}
          oidc-issuer-url: {{ .issuerUrl }}
          oidc-client-id: {{ .clientId }}
          oidc-username-claim: {{ .usernameClaim }}
          oidc-groups-claim: {{ .groupsClaim }}
          {{- if .usernamePrefix }}
          oidc-username-prefix: {{ .usernamePrefix | quote }}
          {{- end }}
          {{- if .caFile }}
          oidc-ca-file: {{ .caFile }}
          {{- end }}
          {{- end }}
          {{- end }}
          profiling: "false"
          requestheader-allowed-names: "front-proxy-client"
          runtime-config: "api/all=true"
          tls-cipher-suites: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        extraVolumes:
          - name: encryption
            hostPath: /etc/kubernetes/encryption
            mountPath: /etc/kubernetes/encryption
            readOnly: false
            pathType: DirectoryOrCreate
      controllerManager:
        extraArgs:
          authorization-always-allow-paths: "/healthz,/readyz,/livez,/metrics"
          bind-address: "0.0.0.0"
          cloud-provider: external
          enable-hostpath-provisioner: "true"          
          feature-gates: {{ .Values.controllerManager.featureGates }}
          logtostderr: "true"
          profiling: "false"
      dns:
        imageRepository: {{ .Values.controlPlane.dns.imageRepository }}
        imageTag: {{ .Values.controlPlane.dns.imageTag }}
      etcd:
        local:
          extraArgs:
            listen-metrics-urls: "http://0.0.0.0:2381"
          imageRepository: {{ .Values.controlPlane.etcd.imageRepository }}
          imageTag: {{ .Values.controlPlane.etcd.imageTag }}
      imageRepository: {{ .Values.controlPlane.image.repository }}
    {{- if .Values.ssh.users }}
    {{- range .Values.ssh.users }}
    users:
    - name: {{ .name }}
      sshAuthorizedKeys: 
      {{- range .authorizedKeys }}
      - {{ . }}
      {{- end }}
    {{- end }}
    {{- end }}
    {{- if $.Values.proxy.enabled }}
    {{- include "containerdProxyConfig" . | nindent 4}}
    {{- end }}
    initConfiguration:
      patches:
        directory: "/tmp/kubeadm/patches"
      nodeRegistration:
        criSocket: /run/containerd/containerd.sock
        kubeletExtraArgs:
          {{- include "kubeletExtraArgs" . | nindent 10}}
    joinConfiguration:
      patches:
        directory: "/tmp/kubeadm/patches"
      nodeRegistration:
        criSocket: /run/containerd/containerd.sock
        kubeletExtraArgs:
          {{- include "kubeletExtraArgs" . | nindent 10}}
    files:
      {{- include "kubeProxyFiles" . | nindent 6 }}
      {{- range $kubeadmPatch, $_ :=  .Files.Glob  "files/etc/patches/**" }}
      - path: {{ (printf "/tmp/kubeadm/patches/%s" (base $kubeadmPatch)) }}
        content: |-
          {{- $.Files.Get $kubeadmPatch | nindent 10 }}
      {{- end }}
      - path: /etc/kubernetes/encryption/config.yaml
        permissions: "0600"
        contentFrom:
          secret:
            name: {{ include "resource.default.name" $ }}-encryption-provider-config
            key: encryption
    preKubeadmCommands:
      - bash /tmp/kubeadm/patches/kube-apiserver-patch.sh {{ .Values.controlPlane.resourceRatio }}
      - bash /run/kubeadm/gs-kube-proxy-patch.sh
  machineTemplate:
    infrastructureRef:
      apiVersion: {{ include "infrastructureApiVersion" . }}
      kind: VCDMachineTemplate
      name: {{ include "resource.default.name" . }}-control-plane-{{ include "mtRevisionByControlPlane" $ }}
      namespace: {{ .Release.Namespace }}
  replicas: {{ .Values.controlPlane.replicas }}
  version: {{ .Values.kubernetesVersion }}
