# Because cluster provider resources are often deleted before flux has a chance
# to uninstall helm releases for all deleted HelmRelease CRs they become
# leftovers because there is still flux finalizer on them. This looks like
# following:
#
#     $ kubectl get helmrelease -n org-multi-project
#     NAME                                  AGE     READY   STATUS
#     pawe1-cilium                          99m     False   failed to get last release revision
#     pawe1-cloud-provider-cloud-director   99m     False   failed to get last release revision
#
# Both HelmRelease CRs in this case have deletionTimestamp and finalizers set,
# e.g.:
#
#     deletionTimestamp: "2023-03-02T14:34:49Z"
#     finalizers:
#       - finalizers.fluxcd.io
#
# To work around this, post-delete Job deletes all finalizers on all HelmRelease
# CRs created with this chart.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
  namespace: "{{ $.Release.Namespace }}"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
  namespace: "{{ $.Release.Namespace }}"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
rules:
  - apiGroups: ["helm.toolkit.fluxcd.io"]
    resources: ["helmreleases"]
    verbs: ["get", "list", "patch"]
  - apiGroups: ["source.toolkit.fluxcd.io"]
    resources: ["helmcharts"]
    verbs: ["get", "list", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
  namespace: "{{ $.Release.Namespace }}"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
    namespace: "{{ $.Release.Namespace }}"
roleRef:
  kind: Role
  name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
  namespace: "{{ $.Release.Namespace }}"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 86400 # 24h
  template:
    metadata:
      name: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
      namespace: "{{ $.Release.Namespace }}"
      labels:
        {{- include "labels.common" $ | nindent 8 }}
        cnp: {{ include "resource.default.name" $ }}-cleanup-helmreleases-hook
    spec:
      restartPolicy: Never
      serviceAccountName: "{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook"
      securityContext:
        runAsUser: {{ include "securityContext.runAsUser" $ }}
        runAsGroup: {{ include "securityContext.runAsGroup" $ }}
      containers:
        - name: post-delete-job
          image: "{{ .Values.kubectlImage.registry }}/{{ .Values.kubectlImage.name }}:{{ .Values.kubectlImage.tag }}"
          command:
            - "/bin/sh"
            - "-xc"
            - |
              NAMESPACE="{{ $.Release.Namespace }}"
              CLUSTER_NAME="{{ include "resource.default.name" . }}"

              for release in $(kubectl get HelmRelease -n ${NAMESPACE} -l "giantswarm.io/cluster=${CLUSTER_NAME}" -o json | jq -r '.items[].metadata.name'); do
                echo "Patching helmrelease $release to remove finalizers"
                kubectl patch -n ${NAMESPACE} helmrelease "${release}" --type=merge -p '{"metadata": {"finalizers": []}}'
              done

              for chart in $(kubectl get HelmChart -n ${NAMESPACE} -o json | jq -r ".items[] | select(.spec.sourceRef.name == \"${CLUSTER_NAME}-default\" or .spec.sourceRef.name == \"${CLUSTER_NAME}-cluster\") | .metadata.name"); do
                echo "Patching helmchart $chart to remove finalizers"
                kubectl patch -n ${NAMESPACE} helmchart "${chart}" --type=merge -p '{"metadata": {"finalizers": []}}'
                echo "Deleting helmchart $chart"
                kubectl delete -n ${NAMESPACE} helmchart "${chart}" --ignore-not-found=true
              done
          securityContext:
            readOnlyRootFilesystem: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "256Mi"
              cpu: "100m"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-5"
  labels:
    {{- include "labels.common" $ | nindent 4 }}
  name: "allow-{{ include "resource.default.name" $ }}-cleanup-helmreleases-hook-to-apiserver"
  namespace: "{{ $.Release.Namespace }}"
spec:
  egress:
  - toEntities:
    - kube-apiserver
    toPorts:
    - ports:
      - port: "443"
        protocol: TCP
      - port: "6443"
        protocol: TCP
  endpointSelector:
    matchLabels:
      cnp: {{ include "resource.default.name" $ }}-cleanup-helmreleases-hook
