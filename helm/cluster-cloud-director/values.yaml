# Auto-generated by helm-values-gen, do not edit!

cluster:
  providerIntegration:
    apps:
      capiNodeLabeler:
        enable: true
      certExporter:
        configTemplateName: cloudDirectorCertExporterHelmValues
        enable: true
      certManager:
        configTemplateName: cloudDirectorCertManagerHelmValues
        enable: true
      chartOperatorExtensions:
        enable: true
      cilium:
        configTemplateName: cloudDirectorCiliumHelmValues
        enable: true
      ciliumServiceMonitors:
        enable: true
      coreDns:
        enable: true
      etcdKubernetesResourcesCountExporter:
        enable: true
      k8sDnsNodeCache:
        enable: true
      metricsServer:
        enable: true
      netExporter:
        enable: true
      networkPolicies:
        configTemplateName: cloudDirectorNetworkPoliciesHelmValues
        enable: true
      nodeExporter:
        configTemplateName: cloudDirectorNodeExporterHelmValues
        enable: true
      observabilityBundle:
        enable: true
      observabilityPolicies:
        enable: true
      securityBundle:
        enable: true
      teleportKubeAgent:
        enable: true
      verticalPodAutoscaler:
        enable: true
      verticalPodAutoscalerCrd:
        enable: true
    controlPlane:
      resources:
        infrastructureMachineTemplate:
          group: infrastructure.cluster.x-k8s.io
          kind: VCDMachineTemplate
          version: v1beta2
        infrastructureMachineTemplateSpecTemplateName: controlplane-vcdmachinetemplate-spec
    environmentVariables:
      hostName: COREOS_CUSTOM_HOSTNAME
      ipv4: COREOS_CUSTOM_IPV4
    kubeadmConfig:
      enableGiantswarmUser: true
      files:
        - contentFrom:
            secret:
              key: set-hostname.sh
              name: provider-specific-files-1
              prependClusterNameAsPrefix: true
          path: /opt/bin/set-hostname.sh
          permissions: "0755"
      ignition:
        containerLinuxConfig:
          additionalConfig:
            systemd:
              units:
                - contents:
                    after:
                      - network-online.target
                    install:
                      wantedBy:
                        - multi-user.target
                    requires:
                      - network-online.target
                    service:
                      execStart:
                        - /usr/bin/bash -cv 'echo "$("$(find /usr/bin /usr/share/oem -name vmtoolsd -type f -executable 2>/dev/null | head -n 1)" --cmd "info-get guestinfo.ignition.network")" > /opt/bin/set-networkd-units.sh'
                        - /usr/bin/bash -cv 'chmod u+x /opt/bin/set-networkd-units.sh'
                        - /opt/bin/set-networkd-units.sh
                      remainAfterExit: "yes"
                      type: oneshot
                    unit:
                      description: Install the systemd-networkd interface configuration.
                  enabled: true
                  name: set-networkd-units.service
                - contents:
                    install:
                      wantedBy:
                        - multi-user.target
                    service:
                      additionalFields: |-
                        {{- if $.global.connectivity.network.staticRoutes -}}
                        ExecStart=/usr/bin/bash -cv 'sleep 3'
                        {{- range $.global.connectivity.network.staticRoutes }}
                        ExecStart=/usr/bin/bash -cv 'ip route add {{ .destination }} via {{ .via }}'
                        {{- end }}
                        {{- else -}}
                        ExecStart=/usr/bin/bash -cv 'echo "No static routes provided, exiting."'
                        {{- end -}}
                      remainAfterExit: "yes"
                      type: oneshot
                    unit:
                      after:
                        - set-networkd-units.service
                        - systemd-networkd.service
                      bindsTo: systemd-networkd.service
                      description: Add static network routes.
                  enabled: true
                  name: static-routes.service
                - contents:
                    install:
                      wantedBy:
                        - multi-user.target
                    service:
                      environment:
                        - OUTPUT=/run/metadata/coreos
                      execStart:
                        - /usr/bin/mkdir --parent /run/metadata
                        - /usr/bin/bash -cv 'echo "COREOS_CUSTOM_HOSTNAME=$("$(find /usr/bin /usr/share/oem -name vmtoolsd -type f -executable 2>/dev/null | head -n 1)" --cmd "info-get guestinfo.ignition.vmname")" > ${OUTPUT}'
                        - /usr/bin/bash -cv 'echo "COREOS_CUSTOM_IPV4=$(ip -4 addr show ens192 | awk \'/inet / {print $2}\' | cut -d \'/\' -f1)" >> ${OUTPUT}'
                      remainAfterExit: "yes"
                      restart: on-failure
                      type: oneshot
                    unit:
                      after:
                        - set-networkd-units.service
                      description: Provides CoreOS metadata for dependent services.
                  enabled: true
                  name: coreos-metadata.service
                - contents:
                    install:
                      wantedBy:
                        - multi-user.target
                    service:
                      environmentFile:
                        - /run/metadata/coreos
                      execStart:
                        - /opt/bin/set-hostname.sh
                      remainAfterExit: "yes"
                      type: oneshot
                    unit:
                      after:
                        - coreos-metadata.service
                      before:
                        - teleport.service
                      description: Set machine hostname
                      requires:
                        - coreos-metadata.service
                  enabled: true
                  name: set-hostname.service
                - contents:
                    install:
                      wantedBy:
                        - default.target
                    service:
                      execStart:
                        - /usr/sbin/ethtool -K ens192 tx-udp_tnl-csum-segmentation off
                        - /usr/sbin/ethtool -K ens192 tx-udp_tnl-segmentation off
                      remainAfterExit: "yes"
                      type: oneshot
                    unit:
                      after:
                        - network.target
                      description: Disable TCP segmentation offloading
                  enabled: true
                  name: ethtool-segmentation.service
                - dropins:
                    - contents: |-
                        [Unit]
                        Upholds=static-routes.service
                      name: 10-static-routes-dependency.conf
                  enabled: true
                  name: systemd-networkd.service
                - contents:
                    install:
                      wantedBy:
                        - multi-user.target
                    service:
                      additionalFields: |-
                        {{- if $.global.connectivity.network.hostEntries -}}
                        # Helm templating is a nightmare
                        {{- range $.global.connectivity.network.hostEntries }}
                        ExecStart=/usr/bin/bash -cv 'echo {{ .ip }} {{ .fqdn }} >> /etc/hosts'
                        {{- end }}
                        {{- else -}}
                        ExecStart=/usr/bin/bash -cv 'echo "No host entries provided, exiting."'
                        {{- end -}}
                      remainAfterExit: "yes"
                      type: oneshot
                    unit:
                      after:
                        - set-hostname.service
                      description: Add /etc/hosts entries.
                      requires:
                        - set-hostname.service
                  enabled: true
                  name: etc-hosts-entries.service
      postKubeadmCommands:
        - usermod -aG root nobody
    provider: cloud-director
    resourcesApi:
      bastionResourceEnabled: false
      cleanupHelmReleaseResourcesEnabled: true
      helmRepositoryResourcesEnabled: true
      infrastructureCluster:
        group: infrastructure.cluster.x-k8s.io
        kind: VCDCluster
        version: v1beta2
      infrastructureMachinePool:
        group: infrastructure.cluster.x-k8s.io
        kind: VCDMachineTemplate
        version: v1beta2
      machineHealthCheckResourceEnabled: false
      nodePoolKind: MachineDeployment
    workers:
      defaultNodePools:
        def00:
          catalog: giantswarm
          diskSize: "30"
          replicas: 2
          sizingPolicy: m1.large
      resources:
        infrastructureMachineTemplateSpecTemplateName: worker-vcdmachinetemplate-spec
connectivity:
  containerRegistries: {}
global:
  connectivity:
    containerRegistries: {}
    localRegistryCache:
      enabled: false
      mirroredRegistries: []
      port: 32767
    network:
      controlPlaneEndpoint:
        port: 6443
      loadBalancers: {}
      pods:
        cidrBlocks:
          - 10.244.0.0/16
      services:
        cidrBlocks:
          - 172.31.0.0/16
    proxy: {}
  controlPlane:
    machineTemplate:
      catalog: giantswarm
    oidc: {}
    replicas: 1
  metadata:
    preventDeletion: false
    servicePriority: highest
  nodePools:
    worker:
      catalog: giantswarm
      replicas: 2
  podSecurityStandards:
    enforced: true
  providerSpecific:
    cloudProviderInterface:
      enableVirtualServiceSharedIP: true
      oneArm:
        enabled: false
    containerStorageInterface:
      storageClass:
        delete:
          isDefault: true
          vcdStorageProfileName: ""
        enabled: true
        retain:
          isDefault: false
          vcdStorageProfileName: ""
    userContext:
      secretRef: {}
    vmBootstrapFormat: ignition
  release: {}
internal:
  kubectlImage:
    name: giantswarm/kubectl
    registry: gsoci.azurecr.io
    tag: 1.27.14
  useAsManagementCluster: false
